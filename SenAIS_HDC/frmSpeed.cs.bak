using System;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SenAIS
{
    public partial class frmSpeed : Form
    {
        private Timer updateTimer;
        private SQLHelper sqlHelper;
        private OPCManager opcManager;
        private string serialNumber;
        public decimal speedValue;
        private bool isReady = false;
        private decimal minSpeed = 0;
        private decimal maxSpeed = 0;
        private bool hasProcessedNextVin = false; // Cờ kiểm soát việc next số VIN
        private static readonly string opcSpeedCounter = ConfigurationManager.AppSettings["Speed_Counter"];
        private static readonly string opcSpeedResult = ConfigurationManager.AppSettings["Speed_Result"];

        public frmSpeed(string serialNumber)
        {
            InitializeComponent();
            this.serialNumber = serialNumber;
            sqlHelper = new SQLHelper();
            LoadVehicleStandards(serialNumber);
            InitializeTimer();
            opcManager = new OPCManager();
        }
        private void InitializeTimer()
        {
            updateTimer = new Timer();
            updateTimer.Interval = 500; // Kiểm tra mỗi giây
            updateTimer.Tick += new EventHandler(UpdateReadyStatus);
            updateTimer.Start();
        }
        private async void UpdateReadyStatus(object sender, EventArgs e)
        {
            try
            {
                lbVinNumber.Text = this.serialNumber;
                // Lấy giá trị OPC
                int checkStatus = await Task.Run(() => (int)opcManager.GetOPCValue(opcSpeedCounter));
                Invoke((Action)(() =>
                 {
                     switch (checkStatus)
                     {
                         case 0: // Mặc định
                             cbReady.BackColor = SystemColors.Control;
                             lbSpeed.Visible = false;
                             lbEnd.Visible = false;
                             lbStandard.Visible = false;
                             isReady = false;
                             hasProcessedNextVin = false; // Reset cờ chuyển số VIN
                             break;

                         case 1: // Xe vào vị trí
                             cbReady.BackColor = Color.Green; // Đèn xanh sáng
                             isReady = false; // Chưa sẵn sàng lưu
                             lbSpeed.Visible = false;
                             lbEnd.Visible = false;
                             lbStandard.Visible = true;
                             break;

                         case 2: // Bắt đầu đo
                             cbReady.BackColor = Color.Green; // Đèn xanh sáng
                             isReady = true; // Sẵn sàng lưu sau khi đo
                             lbTitleSpeed.Visible = false;
                             lbEnd.Visible = false;
                             lbSpeed.Visible = true;
                             double speedA = sqlHelper.GetParaValue("Speed", "ParaA");
                             double speedResult = opcManager.GetOPCValue(opcSpeedResult);
                             double speed = speedResult / speedA;
                             lbSpeed.Text = speed.ToString("F1");

                             this.speedValue = Convert.ToDecimal(speed.ToString("F1"));

                             // Kiểm tra và đổi màu label Noise nếu ngoài tiêu chuẩn
                             bool isValueInStandard = this.speedValue >= minSpeed && (maxSpeed == 0 || this.speedValue <= maxSpeed);

                             if (isValueInStandard)
                             {
                                 lbSpeed.ForeColor = SystemColors.HotTrack;
                             }
                             else
                             {
                                 lbSpeed.ForeColor = Color.DarkRed; // Nếu không đạt tiêu chuẩn, đổi màu
                             }
                             break;

                         case 3: // Quá trình đo hoàn tất, lưu vào DB
                             cbReady.BackColor = Color.Green; // Đèn xanh
                             lbTitleSpeed.Visible = false;
                             lbEnd.Visible = true;
                             lbSpeed.Visible = true;
                             if (isReady)
                             {
                                 SaveDataToDatabase();
                                 isReady = false;
                             }
                             break;

                         case 4: // Xe tiếp theo
                             cbReady.BackColor = SystemColors.Control;
                             lbStandard.Visible = false;
                             lbTitleSpeed.Visible = true;
                             if (!hasProcessedNextVin)
                             {
                                 string nextSerialNumber = sqlHelper.GetNextSerialNumber(this.serialNumber);
                                 if (!string.IsNullOrEmpty(nextSerialNumber))
                                 {
                                     this.serialNumber = nextSerialNumber;
                                     lbVinNumber.Text = this.serialNumber;

                                     var frmMain = Application.OpenForms.OfType<frmInspection>().FirstOrDefault();
                                     if (frmMain != null)
                                     {
                                         var txtVinNumber = frmMain.Controls.Find("txtVinNum", true).FirstOrDefault() as TextBox;
                                         if (txtVinNumber != null)
                                         {
                                             txtVinNumber.Text = this.serialNumber; // Cập nhật số VIN
                                         }
                                     }
                                     hasProcessedNextVin = true; // Đánh dấu đã xử lý
                                     this.Close();
                                 }
                                 else
                                 {
                                     this.Close();
                                 }
                             }
                             break;

                         default: // Trạng thái không hợp lệ hoặc chưa sẵn sàng
                             cbReady.BackColor = SystemColors.Control; // Màu mặc định
                             isReady = false;
                             lbTitleSpeed.Visible = true;
                             break;

                     }
                 }));
            }
            catch (Exception)
            {
            }
        }
        private decimal ConvertToDecimal(object value)
        {
            return value == DBNull.Value ? 0 : Convert.ToDecimal(value);
        }
        private void LoadVehicleStandards(string serialNumber)
        {
            DataRow vehicleDetails = sqlHelper.GetVehicleDetails(serialNumber);
            if (vehicleDetails != null)
            {
                string vehicleType = vehicleDetails["VehicleType"].ToString();
                DataTable vehicleStandards = sqlHelper.GetVehicleStandardsByTypeCar(vehicleType);
                if (vehicleStandards.Rows.Count > 0)
                {
                    DataRow standard = vehicleStandards.Rows[0];
                    minSpeed = ConvertToDecimal(standard["MinSpeed"]);
                    maxSpeed = ConvertToDecimal(standard["MaxSpeed"]);
                }
                lbStandard.Text = (minSpeed > 0 && maxSpeed > 0) ? $"[{minSpeed.ToString("F0")} - {maxSpeed.ToString("F0")}]" : "-- - --";
            }
        }
        private void btnPreSpeed_Click(object sender, EventArgs e)
        {
            try
            {
                // Lưu dữ liệu hiện tại
                if (isReady)
                {
                    SaveDataToDatabase(); // Lưu DB nếu đèn xanh và CP xác nhận lưu
                }
                // Lấy SerialNumber trước đó
                string previousSerialNumber = sqlHelper.GetPreviousSerialNumber(this.serialNumber);
                if (!string.IsNullOrEmpty(previousSerialNumber))
                {
                    // Cập nhật serialNumber mới
                    this.serialNumber = previousSerialNumber;
                    lbVinNumber.Text = this.serialNumber; // Hiển thị serial number mới
                    isReady = false; // Đặt lại trạng thái
                    LoadVehicleStandards(this.serialNumber);
                }
                else
                {
                    MessageBox.Show("Không có xe trước đó.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi khi thay đổi Số Máy: " + ex.Message);
            }
        }
        private void btnNextSpeed_Click(object sender, EventArgs e)
        {
            try
            {
                if (isReady)
                {
                    SaveDataToDatabase(); // Lưu dữ liệu nếu sẵn sàng
                }

                string nextSerialNumber = sqlHelper.GetNextSerialNumber(this.serialNumber);
                if (!string.IsNullOrEmpty(nextSerialNumber))
                {
                    this.serialNumber = nextSerialNumber; // Cập nhật serial number
                    lbVinNumber.Text = this.serialNumber; // Hiển thị serial number mới
                    isReady = false; // Đặt lại trạng thái
                    LoadVehicleStandards(this.serialNumber);
                }
                else
                {
                    MessageBox.Show("Không có xe tiếp theo.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi khi thay đổi Số Máy: " + ex.Message);
            }
        }
        private void SaveDataToDatabase()
        {
            sqlHelper.SaveSpeedData(this.serialNumber, this.speedValue);
        }

        private void frmSpeed_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (updateTimer != null)
            {
                updateTimer.Stop(); // Dừng Timer
                updateTimer.Dispose(); // Giải phóng tài nguyên
                updateTimer = null; // Gán null để tránh tham chiếu ngoài ý muốn
            }
            e.Cancel = false;
        }
    }
}
